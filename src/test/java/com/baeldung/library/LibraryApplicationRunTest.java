// ********RoostGPT********
/*
Test generated by RoostGPT for test pushTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=run_525c38228c
ROOST_METHOD_SIG_HASH=run_35a4e9bfd6

"""
Scenario 1: Test successful saving of author with a book
Details:
  TestName: testSuccessfulAuthorAndBookSave
  Description: This test verifies that the method correctly creates an author and a book, and successfully saves the author in the repository.
Execution:
  Arrange: Create a mock for the AuthorRepository. Set up an ApplicationArguments object with the necessary parameters.
  Act: Call the run method with the provided ApplicationArguments.
  Assert: Verify that the save method of the AuthorRepository was called with the correct Author object.
Validation:
  This test ensures that the method correctly creates and saves an Author with a Book. This is important for the application's ability to store new authors and their books.

Scenario 2: Test exception handling when saving author fails
Details:
  TestName: testExceptionOnAuthorSaveFailure
  Description: This test checks that the method handles exceptions correctly when the save operation on the AuthorRepository fails.
Execution:
  Arrange: Create a mock for the AuthorRepository that throws an exception when the save method is called. Set up an ApplicationArguments object with the necessary parameters.
  Act: Call the run method with the provided ApplicationArguments.
  Assert: Verify that an exception was thrown.
Validation:
  This test ensures that the method correctly handles exceptions during the save operation. This is crucial for the application's robustness and error handling capabilities.

Scenario 3: Test correct creation of book and author objects
Details:
  TestName: testCorrectCreationOfBookAndAuthor
  Description: This test verifies that the method correctly creates a Book and an Author object with the provided parameters.
Execution:
  Arrange: Create a mock for the AuthorRepository. Set up an ApplicationArguments object with the necessary parameters.
  Act: Call the run method with the provided ApplicationArguments.
  Assert: Verify that the created Book and Author objects have the correct properties.
Validation:
  This test ensures that the method correctly creates Book and Author objects. This is important for the application's ability to correctly represent authors and their books.
"""
*/

// ********RoostGPT********
package com.baeldung.library;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.ApplicationArguments;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import com.baeldung.library.domain.Author;
import com.baeldung.library.domain.Book;
import com.baeldung.library.repo.AuthorRepository;
import com.google.common.collect.Lists;

@RunWith(MockitoJUnitRunner.class)
public class LibraryApplicationRunTest {

	@Mock
	private AuthorRepository authorRepo;

	@Mock
	private ApplicationArguments args;

	@InjectMocks
	private LibraryApplicationRun libraryApplicationRun;

	@Before
	public void setup() {
		// TODO: add setup if needed
	}

	@Test
	public void testSuccessfulAuthorAndBookSave() throws Exception {
		libraryApplicationRun.run(args);
		verify(authorRepo, times(1)).save(any(Author.class));
	}

	@Test(expected = Exception.class)
	public void testExceptionOnAuthorSaveFailure() throws Exception {
		doThrow(new Exception()).when(authorRepo).save(any(Author.class));
		libraryApplicationRun.run(args);
	}

	@Test
	public void testCorrectCreationOfBookAndAuthor() throws Exception {
		libraryApplicationRun.run(args);
		verify(authorRepo, times(1)).save(argThat(author -> "Margaret Mitchell".equals(author.getName()) && author
			.getBooks()
			.stream()
			.anyMatch(book -> "Gone with the Wind".equals(book.getTitle()) && "9787806571491".equals(book.getIsbn()))));
	}

}
